#pragma kernel TransformCS

#define THREAD_SIZE 4

#include "./cginc/OneBox.cginc"
#include "./cginc/Line.cginc"
#include "./cginc/Tile.cginc"
#include "./cginc/Sphere.cginc"
#include "./cginc/TiledBox.cginc"
#include "./cginc/Tunnel.cginc"

struct QuadData
{
    float3 position;
    float3 rotation;
    float3 scale;
};

RWStructuredBuffer<QuadData> _QuadDataBufferWrite;

int _QuadCount;
int _ModeNum;
int _PreModeNum;
float _LerpValue;
float _Time;

float _ScaleX;

[numthreads(THREAD_SIZE, 1, 1)]
void TransformCS(uint3 DTid : SV_DispatchThreadID, uint3 Gid : SV_GroupID, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
{
    const unsigned int GT_ID = GTid.x; //グループ内のスレッドID
    const unsigned int G_ID = Gid.x;
    const unsigned int DT_ID = DTid.x; //ぜんたいからみたID

    float3 pos = (float3)0;
    float3 rot = (float3)0;
    float3 scl = (float3)0;

    float3x3 dstMatrix = (float3x3)0;

    float3x3 oneBoxMatrix = oneBox(GT_ID, DT_ID);
    // float3x3 loopBoxMatrix = loopBox(GT_ID, G_ID, 1.0);
    float3x3 lineMatrix = lineMat(DT_ID, _QuadCount, _Time);
    float3x3 tileMatrix = tileMat(DT_ID, _QuadCount, _Time);
    float3x3 sphereMatrix = sphereMat(DT_ID, _QuadCount, _Time);
    float3x3 tiledBoxMatrix = tiledBoxMat(DT_ID);
    float3x3 tunnelMatrix = tunnelMat(DT_ID, 64, _Time, _ScaleX);

    float3x3 matArr[6];
    matArr[0] = oneBoxMatrix;
    matArr[1] = tiledBoxMatrix;
    matArr[2] = lineMatrix;
    matArr[3] = tileMatrix;
    matArr[4] = sphereMatrix;
    matArr[5] = tunnelMatrix;

    if(_PreModeNum == _ModeNum)
    {
        dstMatrix = matArr[_ModeNum];
    }
    else
    {
        dstMatrix = lerp(matArr[_PreModeNum], matArr[_ModeNum], _LerpValue);
    }

    pos = dstMatrix._11_12_13;
    rot = dstMatrix._21_22_23;
    scl = dstMatrix._31_32_33;

    _QuadDataBufferWrite[DT_ID].position = pos;
    _QuadDataBufferWrite[DT_ID].rotation = rot;
    _QuadDataBufferWrite[DT_ID].scale = scl;
}